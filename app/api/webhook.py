from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import Dict, Any
import logging

from app.core.database import get_db
from app.services.telegram import TelegramService
from app.models.telegram_bot import TelegramBot
from app.models.subscriber import Subscriber
from app.schemas.subscriber import SubscriberCreate

router = APIRouter(prefix="/telegram", tags=["webhook"])
logger = logging.getLogger(__name__)

@router.post("/webhook/{bot_token}")
async def telegram_webhook(
    bot_token: str,
    update: Dict[str, Any],
    db: AsyncSession = Depends(get_db)
):
    """Handle Telegram webhook updates"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        bot_result = await db.execute(
            select(TelegramBot).where(TelegramBot.bot_token == bot_token)
        )
        bot = bot_result.scalar_one_or_none()
        
        if not bot:
            raise HTTPException(status_code=404, detail="Bot not found")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message" in update:
            message = update["message"]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if "text" in message and message["text"].startswith("/start"):
                chat = message["chat"]
                from_user = message.get("from", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫
                existing_result = await db.execute(
                    select(Subscriber).where(
                        Subscriber.bot_id == bot.id,
                        Subscriber.telegram_user_id == chat["id"]
                    )
                )
                existing = existing_result.scalar_one_or_none()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    existing.username = from_user.get("username")
                    existing.first_name = from_user.get("first_name")
                    existing.last_name = from_user.get("last_name")
                    existing.is_active = True
                    existing.is_blocked = False
                    await db.commit()
                    response_text = "üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
                    subscriber = Subscriber(
                        bot_id=bot.id,
                        telegram_user_id=chat["id"],
                        username=from_user.get("username"),
                        first_name=from_user.get("first_name"),
                        last_name=from_user.get("last_name"),
                        language_code=from_user.get("language_code"),
                        is_active=True
                    )
                    db.add(subscriber)
                    await db.commit()
                    response_text = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                telegram_service = TelegramService(bot_token)
                try:
                    await telegram_service.send_message(
                        chat_id=chat["id"],
                        text=response_text
                    )
                finally:
                    await telegram_service.close()
                
                logger.info(f"Subscriber {chat['id']} processed for bot {bot.id}")
        
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return {"ok": False, "error": str(e)}

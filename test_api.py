#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API BotCast
"""
import asyncio
import httpx
import json
from datetime import datetime

API_URL = "http://localhost:8000"

async def test_api():
    async with httpx.AsyncClient() as client:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BotCast API\n")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
        response = await client.get(f"{API_URL}/health")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.json()}\n")
        
        # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        test_email = f"test_{datetime.now().timestamp()}@example.com"
        register_data = {
            "email": test_email,
            "password": "TestPassword123!"
        }
        response = await client.post(f"{API_URL}/auth/register", json=register_data)
        if response.status_code == 200:
            user = response.json()
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user['email']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
        
        # 3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("\n3Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        login_data = {
            "email": test_email,
            "password": "TestPassword123!"
        }
        response = await client.post(f"{API_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            token_data = response.json()
            token = token_data["access_token"]
            print(f"   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
        headers = {"Authorization": f"Bearer {token}"}
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
        print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤...")
        response = await client.get(f"{API_URL}/bots", headers=headers, follow_redirects=True)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            bots = response.json()
            print(f"   –ë–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(bots)}")
        else:
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        # 5. –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
        print("\n5Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞...")
        bot_data = {
            "bot_token": "test_token_123456:ABC-DEF",
            "bot_name": "Test Bot"
        }
        response = await client.post(f"{API_URL}/bots", json=bot_data, headers=headers, follow_redirects=True)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code != 200:
            try:
                error_detail = response.json()['detail']
                print(f"   ‚ÑπÔ∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ (–Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω): {error_detail}")
            except:
                print(f"   ‚ÑπÔ∏è  –û—Ç–≤–µ—Ç: {response.text}")
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
        print("\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        response = await client.get(f"{API_URL}/broadcasts", headers=headers, follow_redirects=True)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            broadcasts = response.json()
            print(f"   –†–∞—Å—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(broadcasts)}")
        else:
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_api())

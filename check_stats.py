#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
from sqlalchemy import select, func
from app.core.database import AsyncSessionLocal
from app.models.user import User
from app.models.telegram_bot import TelegramBot
from app.models.subscriber import Subscriber
from app.models.broadcast import Broadcast

async def check_stats():
    async with AsyncSessionLocal() as db:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await db.scalar(select(func.count(User.id)))
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
        bots_count = await db.scalar(select(func.count(TelegramBot.id)))
        print(f"ü§ñ –ë–æ—Ç–æ–≤: {bots_count}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_count = await db.scalar(select(func.count(Subscriber.id)))
        active_subscribers = await db.scalar(
            select(func.count(Subscriber.id)).where(
                Subscriber.is_active == True,
                Subscriber.is_blocked == False
            )
        )
        print(f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_subscribers})")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫
        broadcasts_count = await db.scalar(select(func.count(Broadcast.id)))
        print(f"üì® –†–∞—Å—Å—ã–ª–æ–∫: {broadcasts_count}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –±–æ—Ç–∞–º
        if bots_count > 0:
            print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –±–æ—Ç–∞–º:")
            bots = await db.execute(select(TelegramBot))
            for bot in bots.scalars():
                subs_count = await db.scalar(
                    select(func.count(Subscriber.id)).where(
                        Subscriber.bot_id == bot.id
                    )
                )
                print(f"   @{bot.bot_username}: {subs_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

if __name__ == "__main__":
    asyncio.run(check_stats())
